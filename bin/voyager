#!/usr/bin/env node

/**
 * Module dependencies
 */

var program = require('commander')
  , child_process = require('child_process')
  , exec = child_process.exec
  , execFile = child_process.execFile
  , readline = require('readline')
  , colors = require('colors')
  , fs = require('fs')
  , path = require('path')
  , mkdirp = require('mkdirp')
  , generator = require('../lib/generator')
  , voyager = require('../voyager');

program
  .version(voyager.version)
  .option('-n, --new [appname]', 'Create a new voyager application')
  .option('-s, --server [port]', 'Start up the voyager server')
  .option('-t, --test', 'Run the voyager tests')
  .parse(process.argv);

var pwd = process.env.PWD
  , appname
  , buildCount = 0
  , buildLen = 21;

function buildComplete(appname) {
  console.log('Done!\n'.green);
  console.log('     cd ' + appname + ' && npm install');
  console.log('     voyager -s\n');
}

function rmdir(directories, callback) {
  if (typeof directories === 'string') {
    directories = [directories];
  }
  var args = directories;
  args.unshift('-rf');
  execFile('rm', args, { env: process.env }, function (err, stdout, stderr) {
    callback.apply(this, arguments);
  });
}

/*!
 * Parse options
 */

if (program.new) {
  if (typeof program.new === 'string') {
    appname = program.new;

    fs.exists(path.join(process.env.PWD, appname), function (exists) {
      if (exists) {
        var rl = readline.createInterface({
          input: process.stdin,
          output: process.stdout
        });

        rl.question(('The specified directory is not empty; continue anyway?\n').red
                  + ('WARNING: directory will be erased! Seriously, probably not a good idea.\n'
                  + '(anything except YES will abort)').yellow, 
                    function (answer) {
          if (answer === "YES") {
            rmdir(path.join(process.env.PWD, appname), function () {
              generator.build(appname);
              generator.on('complete', buildComplete);
            });
          } else {
            console.log('aborting!'.yellow);
          }
          rl.close();
        });

      } else {
        generator.build(appname);
        generator.on('complete', buildComplete);
      }
    });
  } else {
    throw {
      name: 'ArgumentError',
      message: 'You must specify an application name with this option set.'
    };
  }
}

if (program.server) {
  var server = require(path.join(process.env.PWD, 'app', 'server.js'))
    , port;

  if (typeof program.server === 'string') {
    port = parseInt(program.server);
  } else {
    port = process.env.PORT || 3000;
  }

  server.serve(port);
}

if (program.test) {
  exec('jasmine-node test/ --verbose', function (err, stdout, stderr) {
    if (err) {
      console.error(err);
    }
    if (stderr !== '' || stderr !== null) {
      console.error(stderr);
    }
    console.log(stdout);
  });
}
